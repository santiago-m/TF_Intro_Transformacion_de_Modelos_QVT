/*
 * The SimpleUML to RDB Sample demonstrates how to use QVT transformations for 
 * transforming platform independent model to platform specific model. 
 * 
 * It also demonstrates the following basic features of QVT language: 
 * helper queries, mapping guards, and resolution operations.
 * 
 * Sample model pim.simpleuml is included to be used as an input for the transformation.
 */

/*
 * Two modeltypes are declared. The http NS URIs correspond to those used to register the 
 * Ecore models in the environment. Alternatively, a workspace metamodel may be used 
 * in conjunction with mappings defined in the project properties.
 */
// modeltype UML uses 'SimpleUML';
 
 //modeltype RDB uses 'SimpleRDBMS';
 
 
 modeltype ERM uses 'ERModel';
 modeltype RDB uses 'SimpleRDBMS';

 

/*
 * The transformation signature declares that a UML modeltype is required as input, while an RDB
 * modeltype is produced as an output.  The UML modeltype is referenced as 'uml' throughout the 
 * transformation definition, while no name is needed for the output RDB modeltype.  Note that OCL 
 * type and namespace notation are used in operational QVT (: and :: respectively).
 */
transformation ERModel_To_SimpleRdb(in erm : ERM, out RDB);

/*
 * The main entry point of the transformation.  The 'uml' reference to the input UML modeltype 
 * instance is used to collect all rootObjects() of type Model.  The rootObjects() operation 
 * is available on all QVT Model objects (extents) and returns those objects found at the 
 * root of the input model.  The [UML::Model] statement following the call to rootObjects() 
 * is shorthand notation for the imperative select (xselect) construct where the condition is 
 * a type expression, which effectively performs a oclIsKindOf(UML::Model) with type recasting 
 * as a sequence.
 *
 * The invocation of the model2RDBModel() mapping is done using an -> operator, which is a 
 * shorthand notation for the imperative collect (xcollect) construct.  Alternatively, it could
 * be written as uml.rootObjects()[UML::Model]->xcollect(a | a.map model2RDBModel());
 */
main() {
	erm.objectsOfType(ERM::Package) -> map packageToSchema(); 
}

/*
 * This mapping creates an RDB Schema object from a UML Package.  It includes a when clause to 
 * verify the passed Package contains persistent classes.  Look below to see the logic employed
 * within the hasPersistentClasses() query.
 *
 * The name attributes map directly, while the elements reference is populated with RDB Table 
 * objects mapped from persistent UML Class objects using a map invocation and similar 
 * shorthand notation used above.
 */
mapping ERM::Package::packageToSchema() : RDB::Schema 
{
	name := self.name;
	kind := self.kind;
	tables := self.elements[ERM::Entity] -> select(e : ERM::Entity | not e.belongsTo1ToXRelation()) -> map persistentEntityToTable(null) -> union(
				self.elements[ERM::Relation] -> select(r : ERM::Relation | not r.is_n_to_n()) -> map create_table_e1()) ->union(
				self.elements[ERM::Relation] -> select(r : ERM::Relation | not r.is_n_to_n()) -> map create_table_e2()) ->union(
				self.elements[ERM::Relation] -> select(r : ERM::Relation | r.is_n_to_n()) -> map relation_n_to_n_ToTable());
} 

mapping ERM::Relation::create_table_e1() : RDB::Table {
	if (self.cardinality_1 = 'N') {
		let second_entity_table : RDB::Table = RDB::Table.allInstances() -> select(t : RDB::Table | t.name = self.entity_2.name) -> any(true) in
			self.entity_1.map persistentEntityToTable(second_entity_table);
	}
	else {
		self.entity_1.map persistentEntityToTable(null);
	}
}
mapping ERM::Relation::create_table_e2() : RDB::Table {
	if (self.cardinality_2 = 'N' or self.cardinality_1 = '1') {
		let second_entity_table : RDB::Table = RDB::Table.allInstances() -> select(t : RDB::Table | t.name = self.entity_1.name) -> any(true) in
			self.entity_2.map persistentEntityToTable(second_entity_table);
	}
	else {
		self.entity_1.map persistentEntityToTable(null);
	}
}

mapping ERM::Relation::relation_n_to_n_ToTable() : RDB::Table
{
	name := self.name;
	kind := self.kind;
	let t1 : RDB::Table = RDB::Table.allInstances() -> select(t : RDB::Table | t.name = self.entity_1.name), 
		t2 : RDB::Table = RDB::Table.allInstances() -> select(t : RDB::Table | t.name = self.entity_2.name),
		keysColSet : Set(RDB::Column) = t1.keys -> collect(k : RDB::Key | k.columns) ->union(t2.keys -> collect(k : RDB::Key | k.columns)),
		attrColSet : Set(RDB::Column) = self.attributes -> map attributeTocolumn() in do {
			columns := keysColSet ->union(attrColSet);
			foreignKeys := t1.oclAsSet() -> including(t2) -> map foreignKeyFromTable();
	}
}

mapping RDB::Table::foreignKeyFromTable() : RDB::ForeignKey {
	let pk : RDB::Key = self.keys -> select(k : RDB::Key | k.kind->includes('primary_key')) -> any(true) in do
	{
	columns := pk.columns;
	refersTo := pk;
	}
}

/*
 * This mapping produces an RDB Table object from a UML persistent Class object. The when clause
 * uses the isPersistent() query below to see if the Class has a 'persistent' string as one of 
 * its stereotype strings.
 *
 * Again, the name attributes map directly.  The Class is mapped to a set of TableColumn objects
 * using the class2columns() mapping, the results of which are sorted by name using the OCL 
 * sortedBy() operation.  The primaryKey is set using the class2primaryKey() mapping, while 
 * foreignKeys are set using a resolveIn function.  This will allow us to resolve RDB ForeignKey 
 * objects created using the relationshipAttribute2foreignKey() mapping for each of the Class 
 * attributes. 
 */
mapping ERM::Entity::persistentEntityToTable(t : RDB::Table) : RDB::Table 
{
	name := self.name;
	if (t = null) {
		columns := self.attributes -> map attributeTocolumn()->sortedBy(name);
	}
	else {
		let pkcolumns : Set(RDB::Column) = t.map foreignKeyFromTable() -> collect(fk : RDB::ForeignKey | fk.columns) -> any(true) in
			columns := self.attributes -> map attributeTocolumn() ->asSet() -> union(pkcolumns) ->sortedBy(name);
		foreignKeys := t.map foreignKeyFromTable();
	};
	let primary_key : ERM::Primary_Key = self.primary_key in do {
	keys := self.keys -> excluding(primary_key) -> map entityKeyToTableKey() -> asSet();	
	keys := keys ->union(self.primary_key.map entityPKToTablePK() -> asSet());
	};
	
	schema := self.resolveoneIn(ERM::Package::packageToSchema,RDB::Schema);
}

/*
 * A PrimaryKey object is created from a Class by prefixing the name with 'PK' and resolving 
 * one (the first) Table created from the Class in order to obtain its primary key columns 
 * using a query.
 */
mapping ERM::Key::entityKeyToTableKey() : RDB::Key {
	owner := self.resolveoneIn(ERM::Entity::persistentEntityToTable, RDB::Table);
	columns := self.attribute_set -> map attributeTocolumn() -> sortedBy(name);
}

mapping ERM::Primary_Key::entityPKToTablePK() : RDB::Primary_Key {
	owner := self.resolveoneIn(ERM::Entity::persistentEntityToTable, RDB::Table);
	columns := self.attribute_set -> map attributeTocolumn() -> sortedBy(name);
	kind := 'primary_key';
	name := 'pk_'+self.owner.name;
}

/*
 * This mapping will create an OrderedSet of RDB TableColumn objects from a UML Class object.
 * Similar to package2schemas(), this mapping has no population section, but just an init 
 * that assigns the result based on the union of type mappings from the Class and its
 * generalizations (Class extends DataType).
 *
 * Note that this mapping is defined for type UML::Class and also takes a UML::Class named 
 * targetClass as a parameter.  This pattern is used in several places within this
 * transformation definition to account for how generalization in the UML model is 
 * mapped to columns in the RDB model.  As properties and inherited properties are 
 * flattened into columns, the combined use of 'self' and 'target' parameter represent a
 * way to allow multiple copies of columns for a given property source, as subsequent
 * mapping invocations retrieve the same resulting columns from the trace model. 
 */
mapping ERM::Attribute::attributeTocolumn() : RDB::Column {
	name := self.name;
	kind := self.kind;
	type := self.type.name;
}

query ERM::Entity::belongsTo1ToXRelation() : Boolean {
	return ERM::Relation.allInstances() -> select(r : ERM::Relation | r.entity_1 = self or r.entity_2 = self and (not r.is_n_to_n())) -> notEmpty();
}

query ERM::Entity::existTable(tset : Set(RDB::Table)) : Boolean {
	return tset -> collect(t : RDB::Table | t.name) ->includes(self.name);
}

query ERM::Relation::is_n_to_n() : Boolean {
	return self.cardinality_1 = 'N' and self.cardinality_2 = 'N';
}

query ERM::Relation::is_1_to_1() : Boolean {
	return self.cardinality_1 = '1' and self.cardinality_2 = '1';
}

/*
 * This query returns true if the list of string stereotypes includes one
 * equal to 'persistent'.
 */
query ERM::ERMElement::isPersistent() : Boolean {
	return self.kind->includes('persistent')
}

/*
 * This query examines the contents of a Package to determine if there exists
 * at least one Class that returns true for the isPersistent() query.
 */
query ERM::Package::hasPersistentEntities() : Boolean {
	return self.elements->exists(
		let c : ERM::Entity = oclAsType(ERM::Entity) in 
			c.oclIsUndefined() implies c.isPersistent())
}

/*
 * This helper returns the RDB primitive string corresponding to the passed 
 * UML primitive string.  This helper produces no side effects and could be 
 * written as a query, alternatively.
 */
helper umlPrimitive2rdbPrimitive(in name : String) : String {
	return if name = 'String' then 'varchar' else
		if name = 'Boolean' then 'int' else
			if name = 'Integer' then 'int' else
				name
			endif
		endif
	endif
}
